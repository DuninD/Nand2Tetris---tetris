function GameField.new 1
push constant 12
call Memory.alloc 1
pop pointer 0
push constant 10
call Array.new 1
pop this 0
push constant 10
call Array.new 1
pop this 1
push constant 10
call Array.new 1
pop this 2
push constant 10
call Array.new 1
pop this 3
push constant 10
call Array.new 1
pop this 4
push constant 10
call Array.new 1
pop this 5
push constant 10
call Array.new 1
pop this 6
push constant 10
call Array.new 1
pop this 7
push constant 10
call Array.new 1
pop this 8
push constant 10
call Array.new 1
pop this 9
push constant 10
call Array.new 1
pop this 10
push constant 10
call Array.new 1
pop this 11
push constant 10
pop local 0
label WHILE_EXP0
push local 0
push constant 0
gt
not
if-goto WHILE_END0
push local 0
push constant 1
sub
push this 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
sub
push this 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
sub
push this 2
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
sub
push this 3
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
sub
push this 4
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
sub
push this 5
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
sub
push this 6
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
sub
push this 7
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
sub
push this 8
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
sub
push this 9
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
sub
push this 10
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
sub
push this 11
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
return
function GameField.Update 4
push argument 0
pop pointer 0
push constant 108
pop local 0
push constant 40
pop local 1
push constant 12
pop local 2
push constant 10
pop local 3
label WHILE_EXP0
push local 2
push constant 0
gt
not
if-goto WHILE_END0
label WHILE_EXP1
push local 3
push constant 0
gt
not
if-goto WHILE_END1
push local 2
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 10
push local 3
sub
push this 0
add
push constant 16384
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 32
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 16
call Math.divide 2
add
call Memory.peek 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE0
push local 2
push constant 2
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 10
push local 3
sub
push this 1
add
push constant 16384
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 32
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 16
call Math.divide 2
add
call Memory.peek 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE1
push local 2
push constant 3
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 10
push local 3
sub
push this 2
add
push constant 16384
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 32
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 16
call Math.divide 2
add
call Memory.peek 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE2
push local 2
push constant 4
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 10
push local 3
sub
push this 3
add
push constant 16384
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 32
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 16
call Math.divide 2
add
call Memory.peek 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE3
push local 2
push constant 5
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 10
push local 3
sub
push this 4
add
push constant 16384
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 32
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 16
call Math.divide 2
add
call Memory.peek 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE4
push local 2
push constant 6
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 10
push local 3
sub
push this 5
add
push constant 16384
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 32
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 16
call Math.divide 2
add
call Memory.peek 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE5
push local 2
push constant 7
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 10
push local 3
sub
push this 6
add
push constant 16384
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 32
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 16
call Math.divide 2
add
call Memory.peek 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE6
push local 2
push constant 8
eq
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 10
push local 3
sub
push this 7
add
push constant 16384
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 32
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 16
call Math.divide 2
add
call Memory.peek 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE7
push local 2
push constant 9
eq
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push constant 10
push local 3
sub
push this 8
add
push constant 16384
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 32
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 16
call Math.divide 2
add
call Memory.peek 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE8
push local 2
push constant 10
eq
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push constant 10
push local 3
sub
push this 9
add
push constant 16384
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 32
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 16
call Math.divide 2
add
call Memory.peek 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE9
push local 2
push constant 11
eq
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push constant 10
push local 3
sub
push this 10
add
push constant 16384
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 32
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 16
call Math.divide 2
add
call Memory.peek 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE10
push local 2
push constant 12
eq
if-goto IF_TRUE11
goto IF_FALSE11
label IF_TRUE11
push constant 10
push local 3
sub
push this 11
add
push constant 16384
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 32
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 16
call Math.divide 2
add
call Memory.peek 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE11
push local 3
push constant 1
sub
pop local 3
goto WHILE_EXP1
label WHILE_END1
push constant 10
pop local 3
push local 2
push constant 1
sub
pop local 2
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function GameField.DoZero 1
push argument 0
pop pointer 0
push constant 10
pop local 0
push constant 10
call Array.new 1
pop argument 1
label WHILE_EXP0
push local 0
push constant 0
gt
not
if-goto WHILE_END0
push local 0
push constant 1
sub
push argument 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function GameField.IsFull 2
push argument 0
pop pointer 0
push constant 0
not
pop local 1
push constant 10
pop local 0
label WHILE_EXP0
push local 0
push constant 0
gt
not
if-goto WHILE_END0
push local 0
push constant 1
sub
push argument 1
add
pop pointer 1
push that 0
push constant 0
eq
push local 0
push constant 1
sub
push argument 1
add
pop pointer 1
push that 0
push constant 0
gt
or
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 1
sub
pop local 0
goto IF_END0
label IF_FALSE0
push constant 0
pop local 1
push constant 0
pop local 0
label IF_END0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function GameField.Shift 1
push argument 0
pop pointer 0
push pointer 0
push this 11
call GameField.IsFull 2
pop local 0
push local 0
push constant 0
not
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push this 11
call GameField.DoZero 2
pop temp 0
label IF_FALSE0
push pointer 0
push this 10
call GameField.IsFull 2
pop local 0
push local 0
push constant 0
not
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 11
pop this 10
push pointer 0
push this 11
call GameField.DoZero 2
pop temp 0
label IF_FALSE1
push pointer 0
push this 9
call GameField.IsFull 2
pop local 0
push local 0
push constant 0
not
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push this 10
pop this 9
push this 11
pop this 10
push pointer 0
push this 11
call GameField.DoZero 2
pop temp 0
label IF_FALSE2
push pointer 0
push this 8
call GameField.IsFull 2
pop local 0
push local 0
push constant 0
not
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push this 9
pop this 8
push this 10
pop this 9
push this 11
pop this 10
push pointer 0
push this 11
call GameField.DoZero 2
pop temp 0
label IF_FALSE3
push pointer 0
push this 7
call GameField.IsFull 2
pop local 0
push local 0
push constant 0
not
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push this 8
pop this 7
push this 9
pop this 8
push this 10
pop this 9
push this 11
pop this 10
push pointer 0
push this 11
call GameField.DoZero 2
pop temp 0
label IF_FALSE4
push pointer 0
push this 6
call GameField.IsFull 2
pop local 0
push local 0
push constant 0
not
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push this 7
pop this 6
push this 8
pop this 7
push this 9
pop this 8
push this 10
pop this 9
push this 11
pop this 10
push pointer 0
push this 11
call GameField.DoZero 2
pop temp 0
label IF_FALSE5
push pointer 0
push this 5
call GameField.IsFull 2
pop local 0
push local 0
push constant 0
not
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push this 6
pop this 5
push this 7
pop this 6
push this 8
pop this 7
push this 9
pop this 8
push this 10
pop this 9
push this 11
pop this 10
push pointer 0
push this 11
call GameField.DoZero 2
pop temp 0
label IF_FALSE6
push pointer 0
push this 4
call GameField.IsFull 2
pop local 0
push local 0
push constant 0
not
eq
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push this 5
pop this 4
push this 6
pop this 5
push this 7
pop this 6
push this 8
pop this 7
push this 9
pop this 8
push this 10
pop this 9
push this 11
pop this 10
push pointer 0
push this 11
call GameField.DoZero 2
pop temp 0
label IF_FALSE7
push pointer 0
push this 3
call GameField.IsFull 2
pop local 0
push local 0
push constant 0
not
eq
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push this 4
pop this 3
push this 5
pop this 4
push this 6
pop this 5
push this 7
pop this 6
push this 8
pop this 7
push this 9
pop this 8
push this 10
pop this 9
push this 11
pop this 10
push pointer 0
push this 11
call GameField.DoZero 2
pop temp 0
label IF_FALSE8
push pointer 0
push this 2
call GameField.IsFull 2
pop local 0
push local 0
push constant 0
not
eq
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push this 3
pop this 2
push this 4
pop this 3
push this 5
pop this 4
push this 6
pop this 5
push this 7
pop this 6
push this 8
pop this 7
push this 9
pop this 8
push this 10
pop this 9
push this 11
pop this 10
push pointer 0
push this 11
call GameField.DoZero 2
pop temp 0
label IF_FALSE9
push pointer 0
push this 1
call GameField.IsFull 2
pop local 0
push local 0
push constant 0
not
eq
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push this 2
pop this 1
push this 3
pop this 2
push this 4
pop this 3
push this 5
pop this 4
push this 6
pop this 5
push this 7
pop this 6
push this 8
pop this 7
push this 9
pop this 8
push this 10
pop this 9
push this 11
pop this 10
push pointer 0
push this 11
call GameField.DoZero 2
pop temp 0
label IF_FALSE10
push pointer 0
push this 0
call GameField.IsFull 2
pop local 0
push local 0
push constant 0
not
eq
if-goto IF_TRUE11
goto IF_FALSE11
label IF_TRUE11
push this 1
pop this 0
push this 2
pop this 1
push this 3
pop this 2
push this 4
pop this 3
push this 5
pop this 4
push this 6
pop this 5
push this 7
pop this 6
push this 8
pop this 7
push this 9
pop this 8
push this 10
pop this 9
push this 11
pop this 10
push pointer 0
push this 11
call GameField.DoZero 2
pop temp 0
label IF_FALSE11
push constant 0
return
function GameField.PrintField 5
push argument 0
pop pointer 0
push constant 12
pop local 2
push constant 10
pop local 3
push constant 100
pop local 0
push constant 32
pop local 1
label WHILE_EXP0
push local 2
push constant 0
gt
not
if-goto WHILE_END0
label WHILE_EXP1
push local 3
push constant 0
gt
not
if-goto WHILE_END1
push local 2
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 10
push local 3
sub
push this 0
add
pop pointer 1
push that 0
push constant 0
gt
push constant 10
push local 3
sub
push this 0
add
pop pointer 1
push that 0
push constant 0
eq
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 15
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 15
add
call Screen.drawRectangle 4
pop temp 0
goto IF_END1
label IF_FALSE1
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
call BasedSquare.new 2
pop local 4
push local 4
call BasedSquare.printSquare 1
pop temp 0
label IF_END1
label IF_FALSE0
push local 2
push constant 2
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 10
push local 3
sub
push this 1
add
pop pointer 1
push that 0
push constant 0
gt
push constant 10
push local 3
sub
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
or
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 15
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 15
add
call Screen.drawRectangle 4
pop temp 0
goto IF_END3
label IF_FALSE3
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
call BasedSquare.new 2
pop local 4
push local 4
call BasedSquare.printSquare 1
pop temp 0
label IF_END3
label IF_FALSE2
push local 2
push constant 3
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 10
push local 3
sub
push this 2
add
pop pointer 1
push that 0
push constant 0
gt
push constant 10
push local 3
sub
push this 2
add
pop pointer 1
push that 0
push constant 0
eq
or
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 15
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 15
add
call Screen.drawRectangle 4
pop temp 0
goto IF_END5
label IF_FALSE5
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
call BasedSquare.new 2
pop local 4
push local 4
call BasedSquare.printSquare 1
pop temp 0
label IF_END5
label IF_FALSE4
push local 2
push constant 4
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 10
push local 3
sub
push this 3
add
pop pointer 1
push that 0
push constant 0
gt
push constant 10
push local 3
sub
push this 3
add
pop pointer 1
push that 0
push constant 0
eq
or
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 0
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 15
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 15
add
call Screen.drawRectangle 4
pop temp 0
goto IF_END7
label IF_FALSE7
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
call BasedSquare.new 2
pop local 4
push local 4
call BasedSquare.printSquare 1
pop temp 0
label IF_END7
label IF_FALSE6
push local 2
push constant 5
eq
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push constant 10
push local 3
sub
push this 4
add
pop pointer 1
push that 0
push constant 0
gt
push constant 10
push local 3
sub
push this 4
add
pop pointer 1
push that 0
push constant 0
eq
or
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push constant 0
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 15
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 15
add
call Screen.drawRectangle 4
pop temp 0
goto IF_END9
label IF_FALSE9
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
call BasedSquare.new 2
pop local 4
push local 4
call BasedSquare.printSquare 1
pop temp 0
label IF_END9
label IF_FALSE8
push local 2
push constant 6
eq
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push constant 10
push local 3
sub
push this 5
add
pop pointer 1
push that 0
push constant 0
gt
push constant 10
push local 3
sub
push this 5
add
pop pointer 1
push that 0
push constant 0
eq
or
if-goto IF_TRUE11
goto IF_FALSE11
label IF_TRUE11
push constant 0
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 15
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 15
add
call Screen.drawRectangle 4
pop temp 0
goto IF_END11
label IF_FALSE11
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
call BasedSquare.new 2
pop local 4
push local 4
call BasedSquare.printSquare 1
pop temp 0
label IF_END11
label IF_FALSE10
push local 2
push constant 7
eq
if-goto IF_TRUE12
goto IF_FALSE12
label IF_TRUE12
push constant 10
push local 3
sub
push this 6
add
pop pointer 1
push that 0
push constant 0
gt
push constant 10
push local 3
sub
push this 6
add
pop pointer 1
push that 0
push constant 0
eq
or
if-goto IF_TRUE13
goto IF_FALSE13
label IF_TRUE13
push constant 0
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 15
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 15
add
call Screen.drawRectangle 4
pop temp 0
goto IF_END13
label IF_FALSE13
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
call BasedSquare.new 2
pop local 4
push local 4
call BasedSquare.printSquare 1
pop temp 0
label IF_END13
label IF_FALSE12
push local 2
push constant 8
eq
if-goto IF_TRUE14
goto IF_FALSE14
label IF_TRUE14
push constant 10
push local 3
sub
push this 7
add
pop pointer 1
push that 0
push constant 0
gt
push constant 10
push local 3
sub
push this 7
add
pop pointer 1
push that 0
push constant 0
eq
or
if-goto IF_TRUE15
goto IF_FALSE15
label IF_TRUE15
push constant 0
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 15
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 15
add
call Screen.drawRectangle 4
pop temp 0
goto IF_END15
label IF_FALSE15
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
call BasedSquare.new 2
pop local 4
push local 4
call BasedSquare.printSquare 1
pop temp 0
label IF_END15
label IF_FALSE14
push local 2
push constant 9
eq
if-goto IF_TRUE16
goto IF_FALSE16
label IF_TRUE16
push constant 10
push local 3
sub
push this 8
add
pop pointer 1
push that 0
push constant 0
gt
push constant 10
push local 3
sub
push this 8
add
pop pointer 1
push that 0
push constant 0
eq
or
if-goto IF_TRUE17
goto IF_FALSE17
label IF_TRUE17
push constant 0
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 15
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 15
add
call Screen.drawRectangle 4
pop temp 0
goto IF_END17
label IF_FALSE17
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
call BasedSquare.new 2
pop local 4
push local 4
call BasedSquare.printSquare 1
pop temp 0
label IF_END17
label IF_FALSE16
push local 2
push constant 10
eq
if-goto IF_TRUE18
goto IF_FALSE18
label IF_TRUE18
push constant 10
push local 3
sub
push this 9
add
pop pointer 1
push that 0
push constant 0
gt
push constant 10
push local 3
sub
push this 9
add
pop pointer 1
push that 0
push constant 0
eq
or
if-goto IF_TRUE19
goto IF_FALSE19
label IF_TRUE19
push constant 0
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 15
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 15
add
call Screen.drawRectangle 4
pop temp 0
goto IF_END19
label IF_FALSE19
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
call BasedSquare.new 2
pop local 4
push local 4
call BasedSquare.printSquare 1
pop temp 0
label IF_END19
label IF_FALSE18
push local 2
push constant 11
eq
if-goto IF_TRUE20
goto IF_FALSE20
label IF_TRUE20
push constant 10
push local 3
sub
push this 10
add
pop pointer 1
push that 0
push constant 0
gt
push constant 10
push local 3
sub
push this 10
add
pop pointer 1
push that 0
push constant 0
eq
or
if-goto IF_TRUE21
goto IF_FALSE21
label IF_TRUE21
push constant 0
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 15
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 15
add
call Screen.drawRectangle 4
pop temp 0
goto IF_END21
label IF_FALSE21
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
call BasedSquare.new 2
pop local 4
push local 4
call BasedSquare.printSquare 1
pop temp 0
label IF_END21
label IF_FALSE20
push local 2
push constant 12
eq
if-goto IF_TRUE22
goto IF_FALSE22
label IF_TRUE22
push constant 10
push local 3
sub
push this 11
add
pop pointer 1
push that 0
push constant 0
gt
push constant 10
push local 3
sub
push this 11
add
pop pointer 1
push that 0
push constant 0
eq
or
if-goto IF_TRUE23
goto IF_FALSE23
label IF_TRUE23
push constant 0
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push constant 15
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
push constant 15
add
call Screen.drawRectangle 4
pop temp 0
goto IF_END23
label IF_FALSE23
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 0
push constant 16
push constant 10
push local 3
sub
call Math.multiply 2
add
push local 1
push constant 16
push constant 12
push local 2
sub
call Math.multiply 2
add
call BasedSquare.new 2
pop local 4
push local 4
call BasedSquare.printSquare 1
pop temp 0
label IF_END23
label IF_FALSE22
push local 3
push constant 1
sub
pop local 3
goto WHILE_EXP1
label WHILE_END1
push constant 10
pop local 3
push local 2
push constant 1
sub
pop local 2
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
